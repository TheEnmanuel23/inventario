{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/importResolvers.js","webpack:///./src/index.js","webpack:///./src/typeDefs.js","webpack:///external \"@graphql-tools/load-files\"","webpack:///external \"@graphql-tools/merge\"","webpack:///external \"apollo-server\"","webpack:///external \"path\""],"names":["path","require","mergeResolvers","loadFilesSync","resolversArray","join","__dirname","module","exports","ApolloServer","typeDefs","resolvers","server","listen","then","res","console","log","url","mergeTypeDefs","typesArray","all"],"mappings":";;;QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;AClFA,uDAAMA,IAAI,GAAGC,mBAAO,CAAC,kBAAD,CAApB;;AAEA,MAAM;AAAEC;AAAF,IAAqBD,mBAAO,CAAC,kDAAD,CAAlC;;AACA,MAAM;AAAEE;AAAF,IAAoBF,mBAAO,CAAC,4DAAD,CAAjC;;AAEA,MAAMG,cAAc,GAAGD,aAAa,CAACH,IAAI,CAACK,IAAL,CAAUC,SAAV,EAAqB,mBAArB,CAAD,CAApC;AAEAC,MAAM,CAACC,OAAP,GAAiBN,cAAc,CAACE,cAAD,CAA/B,C;;;;;;;;;;;;ACPA,MAAM;AAAEK;AAAF,IAAmBR,mBAAO,CAAC,oCAAD,CAAhC;;AACA,MAAMS,QAAQ,GAAGT,mBAAO,CAAC,qCAAD,CAAxB;;AACA,MAAMU,SAAS,GAAGV,mBAAO,CAAC,mDAAD,CAAzB;;AAEA,MAAMW,MAAM,GAAG,IAAIH,YAAJ,CAAiB;AAC9BC,UAD8B;AAE9BC;AAF8B,CAAjB,CAAf;AAKAC,MAAM,CAACC,MAAP,GAAgBC,IAAhB,CAAsBC,GAAD,IAAS;AAC5BC,SAAO,CAACC,GAAR,CAAa,sBAAqBF,GAAG,CAACG,GAAI,EAA1C;AACD,CAFD,E;;;;;;;;;;;ACTA,uDAAMlB,IAAI,GAAGC,mBAAO,CAAC,kBAAD,CAApB;;AAEA,MAAM;AAAEkB;AAAF,IAAoBlB,mBAAO,CAAC,kDAAD,CAAjC;;AACA,MAAM;AAAEE;AAAF,IAAoBF,mBAAO,CAAC,4DAAD,CAAjC;;AAEA,MAAMmB,UAAU,GAAGjB,aAAa,CAACH,IAAI,CAACK,IAAL,CAAUC,SAAV,EAAqB,gBAArB,CAAD,CAAhC;AAEAC,MAAM,CAACC,OAAP,GAAiBW,aAAa,CAACC,UAAD,EAAa;AAAEC,KAAG,EAAE;AAAP,CAAb,CAA9B,C;;;;;;;;;;;;;;;;;;;;;;;;ACPA,sD;;;;;;;;;;;ACAA,iD;;;;;;;;;;;ACAA,0C;;;;;;;;;;;ACAA,iC","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","const path = require(\"path\");\n\nconst { mergeResolvers } = require(\"@graphql-tools/merge\");\nconst { loadFilesSync } = require(\"@graphql-tools/load-files\");\n\nconst resolversArray = loadFilesSync(path.join(__dirname, \"./**/resolvers.js\"));\n\nmodule.exports = mergeResolvers(resolversArray);\n","const { ApolloServer } = require(\"apollo-server\");\nconst typeDefs = require(\"./typeDefs\");\nconst resolvers = require(\"./importResolvers\");\n\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n});\n\nserver.listen().then((res) => {\n  console.log(`ðŸš€ Server ready at ${res.url}`);\n});\n","const path = require(\"path\");\n\nconst { mergeTypeDefs } = require(\"@graphql-tools/merge\");\nconst { loadFilesSync } = require(\"@graphql-tools/load-files\");\n\nconst typesArray = loadFilesSync(path.join(__dirname, \"./**/*.graphql\"));\n\nmodule.exports = mergeTypeDefs(typesArray, { all: true });\n","module.exports = require(\"@graphql-tools/load-files\");","module.exports = require(\"@graphql-tools/merge\");","module.exports = require(\"apollo-server\");","module.exports = require(\"path\");"],"sourceRoot":""}